[{"categories":[],"content":" I like designing stuff and making it alive. It might be a 3D printable object, things like wood \u0026 metal graving, or a software. If you would like to see more about the software part and what I have done so far, you can find my resume here. ","date":"07.05.2020","objectID":"/pages/about/:0:0","tags":[],"title":"About","uri":"/pages/about/"},{"categories":[],"content":"Let’s summarize all the information we have so far. The router makes http requests http://acs.superonline.net:8015/cwmpWeb/WGCPEMgt to get configuration server URL In the response returned, we found https://acs.superonline.net/cwmpWeb/CPEMgt (port 443) as configuration server URL which force router to use TLS connection acs.superonline.net domain has another open port to use to access configuration server which is 8010 We have PPPoE Server named ppp0, PPPoE Client named ppp1, and we forwarded all the packets through ppp1 interface using iptables With all these pieces of information collected, I was ready to start getting the data I needed in the first place. ","date":"06.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/:0:0","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part III","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/"},{"categories":[],"content":"Altering the Response As I mentioned in the previous part, I need a proxy tool to alter the response, and I chose to use Mitmproxy. Installed, and started it with --replace parameter. The meaning of this parameter is to filter only response bodies, if there is a matching string with the first part, replace it with the second part. # installs the mithmproxy $ apt install mitmproxy # start it with replacements $ mitmproxy --mode transparent --showhost --listen-port 8080 --replace \"|~bs .*|https://acs.superonline.net|http://acs.superonline.net:8010\" And now, the only thing needed was, forwarding all the requests going to port 80, 8010, and 8015 to mitmproxy, so it can alter the response for us. # forward packets going 80 to 8080 $ iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 # forward packets going 8010 to 8080 $ iptables -t nat -A PREROUTING -p tcp --dport 8010 -j REDIRECT --to-port 8080 # forward packets going 8015 to 8080 $ iptables -t nat -A PREROUTING -p tcp --dport 8015 -j REDIRECT --to-port 8080 ","date":"06.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/:0:1","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part III","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/"},{"categories":[],"content":"Searching for the Root Password Opened up Wireshark, started capturing the interfaces that cables connected before, and reset the router to factory settings. After a couple of minutes, there were lots of http packets going to http://acs.superonline.net:8010. Wireshark Filter http and ip.host == acs.superonline.net and tcp contains “Adminuser” Root Password\" Root Password As you can see from the results, the configuration server returned the password. The thing is, this password is not static, it changes every time you reset your router so you have to find it again and again if you don’t stop TR069 connection. Finally, I gathered the password but whenever I reset the router, the password will be changed as well. To prevent that I needed to find the firmware and its original root password. ","date":"06.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/:0:2","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part III","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/"},{"categories":[],"content":"Searching for the Firmware We need the configuration server to tell the firmware location. And to do that we need configuration server to think our router has a different version than its latest version. I checked the requests and found out that, the router sends information about its hardware, software, name e.g. Software Version\" Software Version So if I could replace this value in the request, I could get the firmware. First of all, I stopped the mitmproxy and started it with another set of parameters. The meaning of the newly added parameter is to filter only request bodies, if there is a matching string with the first part, replace it with the second part. # start it with replacements $ mitmproxy --mode transparent --showhost --listen-port 8080 --replace \"|~bs .*|https://acs.superonline.net|http://acs.superonline.net:8010\" --replace \"|~bq .*|V1.0.1_TRT24|V1.0.0\" Wireshark Filter http and ip.host == acs.superonline.net and tcp contains “.bin” Firmware Location\" Firmware Location As you can see from the results, the configuration server sent the firmware location. ","date":"06.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/:0:3","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part III","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/"},{"categories":[],"content":"Conclusion Root Password I couldn’t have enough time to examine the firmware itself but I’ve got a feedback about root password. Even though I did not test it my self, it might be fbr_2016_SoL In these blog posts, I explained all the steps to find your root password and the original firmware of the device. I also tried to capturing the original root password. To do that, I altered one of the responses and forced the router to send its password. Unfortunately, there is no password assigned to root user, and as far as I can tell without a password, UI does not let you log in. Completing all of these steps is not easy for everybody, and it takes lots of time. And also, there is no way to log in as root without doing all these steps above. To reduce the complexity and required time, I am planning to develop an application that shows all the information, and sets the root password without too much hassle. ","date":"06.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/:0:4","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part III","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-iii/"},{"categories":[],"content":"In the previous post, I explained how I’ve got the proof that leads me to get the root password and the firmware of the ZTE H267A router. In this part of the series, I will explain the techniques I used and how I configured the environment. But before explaining the successful approach, I want to mention about failed ones briefly. ","date":"04.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/:0:0","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part II","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/"},{"categories":[],"content":"The Failures At first, I tried the golang code here. Unfortunately, it didn’t work well. I saw lots of malformed, retransmitting, or dropped packets, and the router couldn’t connect to the configuration server. As a second solution, I tried iptables to forward packets going through the bridged network. This way, I could be able to modify the response, but none of the packets forwarded to the proxy server. I thought, how come iptables interact with a network interface without an IP assigned. With that thought in mind, I assigned an IP address to the bridge interface, but this time, the router lost its connection to the internet. I don’t have enough knowledge in this area, and my assumption might be wrong. But what I was sure is I needed to find another way to alter the response returning from the configuration server. ","date":"04.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/:0:1","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part II","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/"},{"categories":[],"content":"Successful Technique After all of these failures, I wanted to mimic both the router and the ISP. So in this way, I could bind those mimicked connections on another network interface, and finally, I could use iptables in this scenario. Working Technique Chart\" Working Technique Chart Remove the Bridge If you create a bridge connection like I did in previous post, you need to remove it first. # remove br0 $ brctl delbr br0 Configuring the PPPoE Server If we configure the PPPoE server, we can deceive the router to connect to our machine, instead of ISP. I installed ppp and required packages by running the below commands. # install ppp, ppp-dev, pppoeconf, build-essential $ apt install ppp ppp-dev pppoeconf build-essential # download and install rp-pppoe $ wget -O rp-pppoe.tar.gz https://dianne.skoll.ca/projects/rp-pppoe/download/rp-pppoe-3.13.tar.gz $ tar xvf rp-pppoe.tar.gz $ cd rp-pppoe-3.13/src $ ./configure $ make \u0026\u0026 make install # this will ask a couple of questions but you can just press enter, for firewall question, you should type 0 $ pppoe-setup The configuration of pppoe-server utility took me a while to understand. I tried with different configurations, watched the logs, fixed the problems, and eventually, I built the correct configuration. /etc/ppp/allip 10.0.0.6-20 /etc/ppp/pppoe-server-options require-pap login lcp-echo-interval 10 lcp-echo-failure 2 ms-dns 8.8.8.8 ms-dns 8.8.4.4 netmask 255.255.255.0 defaultroute noipdefault usepeerdns debug logfile /var/log/pppoe-server-log /etc/ppp/pap-secrets fiber@fiber * fiber * YOUR_USERNAME_HERE * YOUR_PASSWORD_HERE * One of the interesting things about pppoe-server is that it requires you to create a user on Ubuntu for each user you added in the pap-secrets file. Based on that information, I created fiber@fiber and YOUR_USERNAME_HERE users by running following command. # create users defined under pap-secrets file $ useradd fiber@fiber # when it asks password type fiber $ passwd fiber@fiber $ useradd YOUR_USERNAME_HERE # when it asks password type YOUR_PASSWORD_HERE $ passwd YOUR_USERNAME_HERE Before going forward, I wanted to test if the router can connect to the PPPoE server. I run the command below to start the server, and to verify it, I opened the web interface of the router and checked if it has an IP like 10.0.0.X # start server with specified network interface $ pppoe-server -C isp -L 10.0.0.1 -I YOUR_INTERFACE_NAME -F Configuring the PPPoE Client Connection Confession To be honest, this part might not be necessary at all. If you have an active internet connection, shared by other devices or wifi etc, you can assign that interface as a default route, and this way you won’t need the second ethernet interface. To connect with the ISP over PPPoE, I used the built-in pppoe tool. So, after connecting the ethernet cable coming from the ISP, I executed pppoeconf first and followed the instructions. After configuration is done, I run pon dsl-provider to actually start the connection between my machine and the ISP. And to check if I really connected to the internet, I executed ping. # run pppoe configuration and follow the instructions $ pppoeconf # start pppoe connection $ pon dsl-provider # check if we have internet connection $ ping 8.8.8.8 # ping should print some values like this # 64 bytes from 8.8.8.8: icmp_seq=0 ttl=53 time=26.323 ms Connecting PPPoE Client and Server To bridge the connections using iptables, I needed to find out which interface is created by pppoe client. To see the name of the interface, I checked by running ifconfig, and I saw that there were 2 connections like ppp. One of them was the PPPoE Server named ppp0 and the other for PPPoE Client named ppp1. So, to be able to connect my router to internet, I needed iptables to forward all packets through ppp1 interface, and I executed the following commands. # enable forwarding $ sysctl -w net.ipv4.ip_forward=1 # forward all packets through ppp1 interface $ iptables -t nat -A POSTROUTING -o ppp1 -j MASQU","date":"04.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/:0:2","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part II","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-ii/"},{"categories":[],"content":"The Story A couple of months ago, I wanted to replace my ISP provided ZTE H267A router with Ubiquiti USG. I already knew from my past experiences that it would be easy to configure internet connection but, what I did not know was configuring IPTV alongside with internet connection is a hell of a thing. The problem here was the missing knowledge on my side. I did know my ISP username and password, but I had no clue about what are the configurations used for the IPTV part. Either I needed to find the configuration, or find the firmware and its root password. I tried too many things and failed too many times, but after a couple of days, I decided to leave the ISP’s router as it is. Recently, I found a bit of free time and reconsidered to try that again. Fortunately, after a couple of hours of research, I found a blog post series that explains how to find firmware of the same ISP’s different router (Huawei HG253S). I read all of those fluently written blog posts in one sitting, and I immediately started to prepare my environment without a second thought. So, here I am writing a similar post for ZTE H267A after successfully obtained what I need in the first place. ","date":"03.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-i/:0:1","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part I","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-i/"},{"categories":[],"content":"Analysis The first thing I did was to check if my router is doing the same thing to get its configuration. I began by checking the open ports of the router: $ nmap --open 192.168.1.1 Starting Nmap 7.80 ( https://nmap.org ) at 2020-05-03 04:00 +03 Nmap scan report for 192.168.1.1 Host is up (0.012s latency). Not shown: 994 closed ports, 1 filtered port Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 53/tcp open domain 80/tcp open http 52869/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 1.33 seconds As we can see from the result, there is no open port for SSH or Telnet. Even if we could find the ports we need open, we couldn’t use it because there is no password we know for this specific router. To reveal which URL our router uses to fetch its configuration, we need to capture the packets going through the wire between the router and the ISP. To do that, we need 2 ethernet interfaces, one connected to the ISP, and the other connected to the router. After connecting ethernet cables, I created the bridge interface using the following commands: # create bridge with interface name br0 $ brctl addbr br0 # add given interfaces to br0 interface $ brctl addif br0 enx00e04c689b8c enx00e04c689bc5 I opened up Wireshark and started capturing on br0 interface and reset the router to its factory settings. Analysis\" Analysis There are 3 things we can understand from this capturing. Initial communication is using http://acs.superonline.net:8015/cwmpWeb/WGCPEMgt. At some point, ISP sends the configuration server URL with InternetGatewayDevice.ManagementServer.URL key and https://acs.superonline.net/cwmpWeb/CPEMgt value. After receiving the configuration URL, the router starts TLS connection with the configuration server over https://acs.superonline.net/cwmpWeb/CPEMgt URL and 443 port. I had all of the information to prove that my router has the same config as mentioned in this blog post series. So I could set up my environment to move forward, and finally, I would be able to find my router’s password. ","date":"03.05.2020","objectID":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-i/:0:2","tags":["superonline","firmware","iptables","mitm"],"title":"A Journey to the Firmware of ZTE H267A: Part I","uri":"/posts/a-journey-to-the-firmware-of-zte-h267a-part-i/"}]